$one: 1;
///Relative Lengths
/* Tip:
* The em and rem units are practical in creating perfectly scalable layout!
* Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.
*/
$em: 1em;
$rem: 1rem;
$vh: 1vh;
$vmin: 1vmin;
$vmax: 1vmax;


//Absolute Lengths
/* more then likely you wont be useing theses they arent responsive at all
* Pixels (px) are relative to the viewing device.
* For low-dpi devices, 1px is one device pixel (dot) of the display.
* For printers and high resolution screens 1px implies multiple device pixels.
*/
$pixels: 1px;
$centimeters: 1cm;
$millimeters: 1mm;
$inches: 1in;
$points: 1pt;
$picas: 1pc;

////
// A collection of function for advanced type checking
// @author Hugo Giraudel
////

@function is-number($value) {
  @return type-of($value) == 'number';
}

@function is-time($value) {
  @return is-number($value) and index('ms' 's', unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

@function is-frequency($value) {
  @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == '%';
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

@function half($value) {
  @return $value / 2;
}

@function quarter($value) {
  @return $value / 4;
}
