//this mixin works to make sure the footer stays at the bottom of the page
//it effects the body, footer and html elements
@mixin sticky-footer($parent) {
    @if ($parent == body) {
      margin: 0 0 100px; /* bottom = footer height */
  } @else if ($parent == footer) {
      position: absolute;
      left: 0;
      bottom: 0;
      height: $footer-height;
      width: 100%;
  } @else if ($parent == html) {
      position: relative;
      min-height: 100%;
  }
}

//makes my buttons clear, in other words gets rid of default styleing of button
@mixin clear-button-defaults{
    border: none;
    outline: none;
}

@mixin margin-system($all-side, $top: null, $left: null, $bottom: null, $right: null, $N-S: null, $E-W: null) {

  @if $all-side == 'compass'{
    margin-top: $N-S * $pixels;
    margin-bottom: $N-S * $pixels;
    margin-left: $E-W * $pixels;
    margin-right: $E-W * $pixels;
    } @else {
      margin: $all-side * $pixels;

        @if $top {
        margin-top: $top * $pixels;
      } @if $right {
        margin-right: $right * $pixels;
      } @if $bottom {
        margin-bottom: $bottom * $pixels;
      } @if $left {
        margin-left: $left * $pixels;
      }
    }
  }



@mixin easy-padding($N-S, $E-W) {
  padding-top: $N-S;
  padding-right: $E-W;
  padding-bottom: $N-S;
  padding-left: $E-W;
}

@mixin padding-system($all-side, $top: null, $left: null, $bottom: null, $right: null) {

  padding: $all-side * $pixels;

    @if $top {
    padding-top: $top * $pixels;
  } @if $right {
    padding-right: $right * $pixels;
  } @if $bottom {
    padding-bottom: $bottom * $pixels;
  } @if $left {
    padding-left: $left * $pixels;
  }
}

@mixin easy-dropShadow($N,$W,$blur,$color) {

  -webkit-box-shadow: $N $W $blur $color;
  -moz-box-shadow: $N $W $blur $color;
  -o-box-shadow: $N $W $blur $color;
}
//styleing hrefs and buttons through out the site
@mixin flat-ui-buttons{
    cursor: pointer;
    &:visited {
      @include background-color($white);
      border-bottom: 5px solid $maincolor;
      color: $black;
    }
    &:active {
      @include background-color($white);
      border-bottom: 5px solid $maincolor;
      color: $black;
    }
}

@mixin width-minNmax($max,$min:null){

    @if is-percentage($max){
      max-width: $max;
      min-width: $min;
    } @else {
        max-width: $max * $pixels;
      @if $min {
        min-width: $min * $pixels;
      } @else {
        $min: $max;
      }
    }
  }

@mixin border-system($style,$color,$width) {
  border: $style $color $width * $pixels;
}

@mixin media-query($screen-type, $tablet:768px,$desktop:1024px) {

  @if $screen-type == "mobile" {
    @media (max-width: #{$tablet}) {
      @content;
      }
    }
    @if $screen-type == "tablet" {
      @media (min-width: #{$tablet}) and (max-width: #{$desktop - $pixels}) {
        @content;
        }
      }
      @if $screen-type == "desktop" {
        @media (min-width: #{$desktop}) {
          @content;
          }
        } else {
          @debug "The varible screen-type equals #{$screen-type} when it should either equal mobile, tablet or desktop";
    }
}
